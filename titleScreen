import pygame,sys
import pygame.mouse
import button
import math  # for checking for collisions with the mouse and the circle
import random
from pygame.locals import * 
from PIL import Image
pygame.init()


#width and height of screen
screen_width, screen_height = 1366,768 

#GLOBAL VARIABLE FOR COLOR TO USE
white = (255, 255, 255)

#CLOCK FOR REFRESH RATE OF THE SCREEN
clock = pygame.time.Clock()

def optionMenu():

	optionScreen = pygame.display.set_mode((screen_width,screen_height))
	pygame.display.set_caption('AIMLAB CLONE')

	#IMAGE FOR BACKGROUND AND CONVERTS THE RESOLUTION FOR THE GIVEN SCREEN RATIO
	img = Image.open('optionBackground/imageFile/optionBackground.png')
	img = img.resize((screen_width, screen_height), Image.Resampling.LANCZOS)
	img.save('optionBackground/resizedImage/optionBackground.png')
	
	#background of the title screen
	backgroundOfOptionScreen=pygame.image.load('optionBackground/resizedImage/optionBackground.png').convert()

	#FONT FOR OPTION MENU
	optionMenuTitleText = pygame.font.Font(None,80)
	optionMenuTitle = optionMenuTitleText.render('A I M L A B',True,(255,255,255))

	#BUTTON FOR CONTINUE OPTION
	continueButtonText = pygame.font.Font(None,70)
	continueButton = continueButtonText.render('CONTINUE',True,(255,255,255))
	continue_Button = button.Button(100,200,continueButton)

	#BUTTON FOR EXIT BUTTON
	exitButtonText = pygame.font.Font(None,70)
	exitButton = exitButtonText.render('EXIT',True,(255,255,255))
	exit_Button = button.Button(100,280,exitButton)

	optionMenuRunning = True

	while optionMenuRunning :
		pygame.display.update()
		for event in pygame.event.get():
			if event.type == KEYDOWN :
	 			if event.key == K_ESCAPE:
						optionMenuRunning = False
		optionScreen.blit(backgroundOfOptionScreen,(0,0))
		optionScreen.blit(optionMenuTitle,(100,100))
		if continue_Button.display(optionScreen):
			optionMenuRunning = False
		if exit_Button.display(optionScreen):
			gameRunning = False
			optionMenuRunning = False
		
		clock.tick(120)




def randomBackground():
    
    #BACKGROUNDS FOR GAME AND STORING THEM IN LIST FOR RANDOM GENERATION
	background1 = 'blackOsu.png'
	background2 = 'pinkOsu.png'
	background3 = 'planet.png'
	background4 = 'space1.png'
	background5 = 'space2.png'
	background6 = 'themeBackground.png'
	background7 = 'violetOsu.png'
	background8 = 'black.png'
	background9 = 'world.png'
	background10 = 'goldPlanet.png'
	background11 = 'orangeSky.png'
	backgrounds = [background1 , background2 , background3 , background4 , background5 , background6 , background7, background8, background9, background10, background11]
	randomChoosedBackground = random.choice(backgrounds)
	return randomChoosedBackground


def imagePathChange( imagePath, imageLocation):
	path = imagePath+imageLocation
	return path


def imageConvertor():
	imageLocation = randomBackground()
	originalImagePath = 'gameBackgrounds/gameBackgrounds/'
	resizedImagePath = 'gameBackgrounds/resizedBackgrounds/'
	img = Image.open(imagePathChange(originalImagePath, imageLocation))
	img = img.resize((screen_width, screen_height), Image.Resampling.LANCZOS)
	img.save(imagePathChange(resizedImagePath, imageLocation))
	backgroundOfScreen=pygame.image.load(imagePathChange(resizedImagePath, imageLocation)).convert()
	return backgroundOfScreen	


def gameStart():
	
	display = pygame.display.set_mode((screen_width, screen_height))
	pygame.display.set_caption('AIMLAB CLONE')
	
	cx = random.randint(100, screen_width - 100)
	cy = random.randint(100, screen_height - 80)
	width_of_circle = 30 
	backgroundDisplay = imageConvertor()
	display.blit(backgroundDisplay,(0,0))
	pygame.draw.circle(display, white, (cx, cy), width_of_circle)

	#SCORE TEXT
	scoreOfGame = 0
	scoreFont = pygame.font.Font('font/ChakraPetch-Bold.ttf',60)   
	scoreFontText = scoreFont.render('SCORE : ' + str(scoreOfGame),True,(255,255,255))

	#EXIT BUTTON IN THE GAME SCREEN
	pauseButtonText = pygame.font.Font('font/ChakraPetch-Bold.ttf',60)
	pauseButton = pauseButtonText.render('PAUSE',True,(255,255,255))
	pause_Button = button.Button(screen_width - 220,10,pauseButton)
	
	global gameRunning 
	gameRunning = True

	# Main loop
	while gameRunning:

		for event in pygame.event.get():
			if event.type == pygame.KEYDOWN:
				if event.key == K_ESCAPE:
					optionMenu()
					display.blit(backgroundDisplay,(0,0))
					pygame.draw.circle(display, white, (cx, cy), width_of_circle)
		x = pygame.mouse.get_pos()[0]
		y = pygame.mouse.get_pos()[1]
		click = pygame.mouse.get_pressed()
		
		pygame.display.update()

		sqx = (x - cx)**2
		sqy = (y - cy)**2
		
		scoreFontText = scoreFont.render('SCORE : ' + str(scoreOfGame),True,(255,255,255))
		display.blit(scoreFontText,(10,20))

		if math.sqrt(sqx + sqy) < width_of_circle and click[0] == 1:
			display.blit(backgroundDisplay,(0,0))  # Reset the screen
			scoreOfGame = scoreOfGame + 1
			cx = random.randint(100, screen_width - 100)
			cy = random.randint(100, screen_height - 80)
			width_of_circle = 30
			pygame.draw.circle(display, white, (cx, cy), width_of_circle)
		if pause_Button.display(display):
			optionMenu()
			display.blit(backgroundDisplay,(0,0))
			pygame.draw.circle(display, white, (cx, cy), width_of_circle)
		pygame.display.update()
		clock.tick(120)


def mainScreen():
	
	#creates a screen by taking the values of width and height according to system compatbility
	screen = pygame.display.set_mode((screen_width,screen_height))
	pygame.display.set_caption('AIMLAB CLONE')

	#IMAGE FOR BACKGROUND AND CONVERTS THE RESOLUTION FOR THE GIVEN SCREEN RATIO
	img = Image.open('mainBackground/mainBackground/titleBackgroundScreen.png')
	img = img.resize((screen_width, screen_height), Image.Resampling.LANCZOS)
	img.save('mainBackground/resized/titleBackgroundScreen.png')
	
	#background of the title screen
	backgroundOfTitleScreen=pygame.image.load('mainBackground/resized/titleBackgroundScreen.png').convert()

	#TITLE ON THE SCREEN(AIMLAB)
	mainTitleFont=pygame.font.Font(None,60)
	mainTitle=mainTitleFont.render('A I M L A B', True ,(255,255,255))

	#AIMLAB ICON IN PNG FORMAT
	aimlabIcon=pygame.image.load('mainBackground/gameIcon/aimLabIcon.png').convert_alpha()

	#PLAYBUTTON
	playButtonText = pygame.font.Font(None,80)
	playButton = playButtonText.render('P L A Y', True, (255,255,255))
	play_Button = button.Button(screen_width/9.8,screen_height/8,playButton)

	#EXIT BUTTON
	quitButtonText = pygame.font.Font(None,70)
	quitButton = quitButtonText.render('Q U I T', True, (255,255,255))
	quit_Button = button.Button(screen_width/9.8,screen_height/4,quitButton) 

    #Running variable for the program to run continously
	running = True

	while running:

		for event in pygame.event.get():
			if event.type == pygame.QUIT :
	 			pygame.quit()
	 			sys.exit()
	 			
			if event.type == KEYDOWN :
	 			if event.key == K_ESCAPE:
						running = False
		screen.blit(backgroundOfTitleScreen,(0,0))		
		screen.blit(mainTitle,(screen_width/1.29,screen_height-90))
		screen.blit(aimlabIcon,(screen_width/1.45,screen_height-119))
		
		if play_Button.display(screen):
	 			gameStart()
		if 	quit_Button.display(screen):
				running = False	
		pygame.display.update()

		clock.tick(60)

mainScreen()
#optionMenu()
pygame.quit()